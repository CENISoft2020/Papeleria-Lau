/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import com.mysql.jdbc.Statement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Andres Gordillo
 */
public class Papeleria extends javax.swing.JFrame {

    /**
     * Creates new form Papeleria
     */
    public Papeleria() {
        initComponents();
        setLocationRelativeTo(null); 
        mostrarDatosEnTabla();
         Data(jLabel2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldCategoria = new javax.swing.JTextField();
        jTextFieldCosto = new javax.swing.JTextField();
        jTextFieldProducto = new javax.swing.JTextField();
        jTextFieldPrecioVenta = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Papeleria ambiental");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categoria", "Producto", "Costo", "Precio venta"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar dato:"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Accesorios:"));

        jTextFieldCategoria.setBorder(javax.swing.BorderFactory.createTitledBorder("Categoria:"));
        jTextFieldCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCategoriaActionPerformed(evt);
            }
        });

        jTextFieldCosto.setBorder(javax.swing.BorderFactory.createTitledBorder("Costo:"));
        jTextFieldCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCostoActionPerformed(evt);
            }
        });

        jTextFieldProducto.setBorder(javax.swing.BorderFactory.createTitledBorder("Producto:"));

        jTextFieldPrecioVenta.setBorder(javax.swing.BorderFactory.createTitledBorder("Precio:"));
        jTextFieldPrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrecioVentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldCategoria)
                    .addComponent(jTextFieldCosto, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Volver Atras");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Hora&Fecha");

        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void mostrarDatosEnTabla(){
        // Definir los nombres de las columnas que quieres mostrar en el JTable
    String[] columnas = {"Categoria", "Producto", "Costo", "Precio_Venta"};
    
    // Crear un modelo de tabla para jTable1
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);
    jTable1.setModel(modeloTabla);

    // Conexión a la base de datos
    Connection con = null;
    Statement st = null;
    ResultSet rs = null;

    try {
        // Establecer la conexión con la base de datos
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Crear la declaración SQL
        String sql = "SELECT * FROM tabla1";
        st = (Statement) con.createStatement();
        
        // Ejecutar la consulta
        rs = st.executeQuery(sql);

        // Recorrer los resultados y agregarlos al modelo de la tabla
        while (rs.next()) {
            String categoria = rs.getString("Categoria");
            String producto = rs.getString("Producto");
            String costo = rs.getString("Costo");
            String precioVenta = rs.getString("Precio_Venta");

            // Crear un array con los datos de cada fila
            String[] fila = {categoria, producto, costo, precioVenta};
            
            // Añadir la fila al modelo de la tabla
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        // Puedes usar JOptionPane para mostrar mensajes de error
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    } finally {
        // Cerrar los recursos
        try {
            if (rs != null) rs.close();
            if (st != null) st.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
   
    // Datos a guardar 
    String categoria = jTextFieldCategoria.getText();
    String producto = jTextFieldProducto.getText();
    String costo = jTextFieldCosto.getText(); 
    String precioVenta = jTextFieldPrecioVenta.getText();

    // Validar los datos antes de proceder
    if (categoria.isEmpty() || producto.isEmpty() || costo.isEmpty() || precioVenta.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Todos los campos deben ser llenados.");
        return;
    }

    // Conexión a la base de datos
    Connection con = null;
    PreparedStatement pst = null;

    try {
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");
        String sql = "INSERT INTO tabla1 (Categoria, Producto, Costo, Precio_Venta) VALUES (?, ?, ?, ?)";

        pst = con.prepareStatement(sql);
        pst.setString(1, categoria);
        pst.setString(2, producto);
        pst.setString(3, costo);
        pst.setString(4, precioVenta);

        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar los datos: " + e.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + e.getMessage());
        }
    }

    mostrarDatosEnTabla();
    // TODO add your handling code here:
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
     
       public static void Data(JLabel jLabel2) {
       // Crear un formateador de fecha y hora en formato de 12 horas con segundos
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss a | dd/MM/yyyy");

        // Definir una tarea que actualiza el JLabel
        ActionListener actualizarHora = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener la hora y fecha actual del sistema
                LocalDateTime now = LocalDateTime.now();
                String formattedDateTime = now.format(formatter);

                // Actualizar el texto de jLabel2
                jLabel2.setText(formattedDateTime);
            }
        };

        // Crear un Timer que se dispare cada 1000 ms (1 segundo)
        Timer timer = new Timer(1000, actualizarHora);

        // Ejecutar inmediatamente la primera actualización
        actualizarHora.actionPerformed(null);

        // Iniciar el Timer
        timer.start();
    }
    
    
    
    private void jTextFieldCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCategoriaActionPerformed

    private void jTextFieldPrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrecioVentaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      
        Menu menu = new Menu();
        menu.setVisible(true); // Mostrar el nuevo frame
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   
     // Verificar si hay una fila seleccionada
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona un registro de la tabla para actualizar.");
        return;
    }
    
   String categoria =  jTextFieldCategoria.getText();
   String producto =  jTextFieldProducto.getText();
   String costo =  jTextFieldCosto.getText();
   String precioVenta = jTextFieldPrecioVenta.getText();
   

        System.out.println("Categoria "+categoria+"Producto "+producto+"Costo "+costo+"PrecioVenta"+precioVenta);
    // Conexión a la base de datos
    Connection con = null;
    PreparedStatement pst = null;

    try {
        // Conectar a la base de datos
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");
        
        // SQL para actualizar los datos
        String sql = "UPDATE tabla1 SET Categoria = ?, Costo = ?, Precio_Venta = ? WHERE Producto = ?";
        pst = con.prepareStatement(sql);

        // Asignar los nuevos valores a la consulta SQL
        pst.setString(1, categoria);
        pst.setString(2, costo);
        pst.setString(3, precioVenta);
        pst.setString(4, producto); // Se usa Producto como identificador único para la actualización

        // Ejecutar la actualización
        int updatedRows = pst.executeUpdate();
        
        // Mostrar mensaje de éxito o error
        if (updatedRows > 0) {
            JOptionPane.showMessageDialog(null, "Datos actualizados correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el registro para actualizar.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar los datos: " + e.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + e.getMessage());
        }
    }

    // Actualizar la tabla para reflejar los cambios
    mostrarDatosEnTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
             // Obtener el índice de la fila seleccionada
    int selectedRow = jTable1.getSelectedRow();

    // Verificar si se ha seleccionado alguna fila
    if (selectedRow != -1) {
        // Obtener el valor de cada columna (0 a 3) de la fila seleccionada
        String valorColumna0 = jTable1.getValueAt(selectedRow, 0).toString();
        String valorColumna1 = jTable1.getValueAt(selectedRow, 1).toString();
        String valorColumna2 = jTable1.getValueAt(selectedRow, 2).toString();
        String valorColumna3 = jTable1.getValueAt(selectedRow, 3).toString();

        // Asignar los valores obtenidos a los JTextField correspondientes
        jTextFieldCategoria.setText(valorColumna0);
        jTextFieldProducto.setText(valorColumna1);
        jTextFieldCosto.setText(valorColumna2);
        jTextFieldPrecioVenta.setText(valorColumna3);
    }     
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextFieldCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCostoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCostoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         
        // Obtén la fila seleccionada en jTable1
    int filaSeleccionada = jTable1.getSelectedRow();

    // Verifica si hay una fila seleccionada
    if (filaSeleccionada != -1) {
        // Obtén el valor de la columna que se utilizará como referencia para eliminar (ej. 'Producto')
        String producto = jTable1.getValueAt(filaSeleccionada, 1).toString(); // Asumiendo que 'Producto' está en la columna 1

        // Establece la conexión a la base de datos
        Connection con = null;
        try {
            // Crea la conexión con la base de datos
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

            // Crea la consulta SQL para eliminar
            String sql = "DELETE FROM tabla1 WHERE Producto = ?";

            // Prepara la consulta
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, producto);

            // Ejecuta la consulta
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                // Remueve la fila de la tabla en la interfaz
                ((DefaultTableModel) jTable1.getModel()).removeRow(filaSeleccionada);
                JOptionPane.showMessageDialog(this, "Registro eliminado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el registro.");
            }

            // Cierra el PreparedStatement
            pst.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error en la conexión a la base de datos: " + e.getMessage());
        } finally {
            // Cierra la conexión a la base de datos
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un registro para eliminar.");
    }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Papeleria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldCategoria;
    private javax.swing.JTextField jTextFieldCosto;
    private javax.swing.JTextField jTextFieldPrecioVenta;
    private javax.swing.JTextField jTextFieldProducto;
    // End of variables declaration//GEN-END:variables
}
